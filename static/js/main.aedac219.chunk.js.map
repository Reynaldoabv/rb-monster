{"version":3,"sources":["components/search-box/SearchBox.component.jsx","components/card/Card.component.jsx","components/card-list/CardList.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","onChange","Card","props","monster","name","email","phone","website","src","id","alt","CardList","monsters","map","key","App","state","searchField","onGettingContacts","setState","string","setTimeout","e","target","value","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yUAeeA,G,MAZG,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC9B,OACI,6BACA,2BACIC,UAAU,SACVF,YAAaA,EACbG,SAAUF,OCOPG,G,MAbF,SAACC,GAAW,IAAD,EACmBA,EAAMC,QAAtCC,EADa,EACbA,KAAMC,EADO,EACPA,MAAOC,EADA,EACAA,MAAOC,EADP,EACOA,QAC3B,OACI,yBAAKR,UAAU,kBACX,yBAAKS,IAAG,+BAA0BN,EAAMC,QAAQM,GAAxC,0BAAoEC,IAAI,cAChF,4BAAKN,GACL,gCAAMC,GACN,4BAAKC,GACL,4BAAKC,MCGFI,G,MAVE,SAACT,GACd,OACI,yBAAKH,UAAU,aAEXG,EAAMU,SAASC,KAAI,SAAAV,GAAO,OAAI,kBAAC,EAAD,CAAMW,IAAKX,EAAQM,GAAIN,QAASA,UC2C3DY,G,iNA7CbC,MAAQ,CACNJ,SAAU,GACVK,YAAa,I,EASfC,kBAAmB,WACjB,EAAKC,SAAS,CAAEC,OAAQ,yEAExBC,YAAW,WACT,EAAKF,SAAS,CAAEC,OAAQ,qBACvB,M,EAILtB,aAAe,SAAAwB,GACb,EAAKH,SAAS,CAAEF,YAAaK,EAAEC,OAAOC,S,mFAhBpB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACP,SAAUiB,S,+BAgBhC,IAAD,EAC2BC,KAAKd,MAA/BJ,EADD,EACCA,SAAUK,EADX,EACWA,YAEZc,EAAmBnB,EAASoB,QAAO,SAAA7B,GAAO,OAC9CA,EAAQC,KAAK6B,cAAcC,SAASjB,EAAYgB,kBAGlD,OACE,yBAAKlC,UAAU,OACb,0CACA,kBAAC,EAAD,CACAoC,KAAK,SACLtC,YAAY,2BACZC,aAAcgC,KAAKhC,eAEnB,kBAAC,EAAD,CAAUc,SAAUmB,S,GAxCVK,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.aedac219.chunk.js","sourcesContent":["import React from 'react';\nimport './search-box.css';\n\nconst SearchBox = ({ placeholder, handleChange}) => {\n    return (\n        <div>\n        <input \n            className='search' \n            placeholder={placeholder} \n            onChange={handleChange}\n        />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\nimport './card.css';\n\nconst Card = (props) => {\n    const {name, email, phone, website } = props.monster;\n    return (\n        <div className=\"card-container\">\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=150x150`} alt=\"robot-img\"/>\n            <h3>{name}</h3>\n            <h5> {email}</h5>      \n            <h5>{phone}</h5>       \n            <h5>{website}</h5>           \n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './../card/Card.component';\nimport './card-list.css';\n\nconst CardList = (props) => {\n    return (\n        <div className=\"card-list\">\n        {\n            props.monsters.map(monster => <Card key={monster.id} monster={monster} />)\n        } \n        </div>\n    )\n}\n\nexport default CardList;\n","import React, { Component } from 'react';\nimport SearchBox from './components/search-box/SearchBox.component.jsx';\nimport CardList from './components/card-list/CardList.component';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    monsters: [],\n    searchField: \"\"\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  onGettingContacts =() => {\n    this.setState({ string: \"Reynaldo Borges, Phone: 940756621, Email: reynaldob.webdev@gmail.com\"});\n\n    setTimeout(() => {\n      this.setState({ string: \"Click me again\"});\n    }, 5000);\n\n  }\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value});\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n    return (\n      <div className=\"App\">  \n        <h1>RB-Monster</h1>\n        <SearchBox \n        type=\"search\"\n        placeholder=\"Search a Monster by name\"\n        handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}